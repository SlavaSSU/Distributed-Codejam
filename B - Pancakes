#define _CRT_SECURE_NO_WARNINGS

#include "message.h"
#include "pancakes.h"

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(3e5) + 555;

int main() {
	int nodes = NumberOfNodes();
	int myId = MyNodeId();
	li n = GetStackSize();
	li m = GetNumDiners();
	//GetStackItem(i);
	int cntNodes = min(n, li(nodes - 1));
	vector<li> lens;
	int mod = n % cntNodes;
	for (int i = 0; i < cntNodes; i++) {
		li len = n / cntNodes;
		if (i < mod) len++;
		lens.push_back(len);
	}

	li sum = 0;

	forn(i, sz(lens)) sum += lens[i];
	assert(sum == n);
	if (myId == nodes - 1) { //final node
		vector<pair<li, li> > a;
		int ans = 0;
		for (int i = 0; i < cntNodes; i++) {
			Receive(i);
			int res = GetInt(i);
			li ft = GetLL(i);
			li lst = GetLL(i);
			ans += res;
			a.push_back(mp(ft, lst));
		}

		for (int i = 0; i + 1 < sz(a); i++) if (a[i].y <= a[i + 1].x) ans--;
		cout << ans << endl;
		return 0;
	}

	if (myId >= cntNodes) { //useless node
		return 0;
	}

	//common node, calc answer and send it to master node
	li from = 0;
	for (int i = 0; i < myId; i++) from += lens[i];
	li to = from + lens[myId] - 1;
	li needLen = n / cntNodes;
	if (myId < mod) needLen++;
	assert(to - from + 1 == needLen);
	int res = 0;
	li i = 0;
	vector<li> v(to - from + 1);
	for (li i = from; i <= to; i++) v[i - from] = GetStackItem(i);
	while (i < sz(v)) {
		li j = i + 1;
		while (j < sz(v) && v[j] >= v[j - 1]) j++;
		res++;
		i = j;
	}

	PutInt(nodes - 1, res);
	PutLL(nodes - 1, v[0]);
	PutLL(nodes - 1, v.back());
	Send(nodes - 1);
	return 0;
}
